require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe NotesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Note. As you add validations to Note, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:note, user_id: @admin.id) }

  let(:invalid_attributes) { FactoryGirl.attributes_for(:note, user_id: nil) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # NotesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST #create" do
    before :each do
      @project = FactoryGirl.create(:project)
      @admin = FactoryGirl.create(:admin)
    end
    context "with valid params" do
      login_admin
      it "creates a new Note" do
        expect {
          post :create, params: {resource_controller: "projects", resource_id: @project.id, note: valid_attributes}
        }.to change(Note, :count).by(1)
      end

      it "assigns a newly created note as @note" do
        post :create, params: {resource_controller: "projects", resource_id: @project.id, note: valid_attributes}
        expect(assigns(:note)).to be_a(Note)
        expect(assigns(:note)).to be_persisted
      end
    end

    context "with invalid params" do
      it "if the user is not signed in will not save" do
        expect{
          post :create, params: {resource_controller: "projects", resource_id: @project.id, note: invalid_attributes}}.to change(Note, :count).by(0)
      end

      it "recieves a 302 response" do
        post :create, params: {resource_controller: "projects", resource_id: @project.id, note: invalid_attributes}
        expect(response.status).to eq(302)
      end
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested note" do
  #       note = Note.create! valid_attributes
  #       put :update, params: {id: note.to_param, note: new_attributes}, session: valid_session
  #       note.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested note as @note" do
  #       note = Note.create! valid_attributes
  #       put :update, params: {id: note.to_param, note: valid_attributes}, session: valid_session
  #       expect(assigns(:note)).to eq(note)
  #     end

  #     it "redirects to the note" do
  #       note = Note.create! valid_attributes
  #       put :update, params: {id: note.to_param, note: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(note)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the note as @note" do
  #       note = Note.create! valid_attributes
  #       put :update, params: {id: note.to_param, note: invalid_attributes}, session: valid_session
  #       expect(assigns(:note)).to eq(note)
  #     end

  #     it "re-renders the 'edit' template" do
  #       note = Note.create! valid_attributes
  #       put :update, params: {id: note.to_param, note: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested note" do
  #     note = Note.create! valid_attributes
  #     expect {
  #       delete :destroy, params: {id: note.to_param}, session: valid_session
  #     }.to change(Note, :count).by(-1)
  #   end

  #   it "redirects to the notes list" do
  #     note = Note.create! valid_attributes
  #     delete :destroy, params: {id: note.to_param}, session: valid_session
  #     expect(response).to redirect_to(notes_url)
  #   end
  # end

end
